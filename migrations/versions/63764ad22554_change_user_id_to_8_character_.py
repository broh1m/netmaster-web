"""Change user ID to 8-character alphanumeric string

Revision ID: 63764ad22554
Revises: df7649fd058f
Create Date: 2025-08-03 21:35:06.792640

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '63764ad22554'
down_revision = 'df7649fd058f'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Step 1: Add new columns
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('new_id', sa.String(length=8), nullable=True))
    
    with op.batch_alter_table('note', schema=None) as batch_op:
        batch_op.add_column(sa.Column('new_user_id', sa.String(length=8), nullable=True))
    
    # Step 2: Generate new alphanumeric IDs and update data
    import string
    import random
    
    connection = op.get_bind()
    
    # Get all existing users
    users = connection.execute(sa.text('SELECT id FROM user')).fetchall()
    
    # Create ID mapping
    id_mapping = {}
    for user in users:
        old_id = user[0]
        # Generate new 8-character alphanumeric ID
        chars = string.ascii_uppercase + string.digits
        while True:
            new_id = ''.join(random.choice(chars) for _ in range(8))
            # Check if this ID is already used
            if new_id not in id_mapping.values():
                id_mapping[old_id] = new_id
                break
    
    # Update user new_id column
    for old_id, new_id in id_mapping.items():
        connection.execute(
            sa.text('UPDATE user SET new_id = :new_id WHERE id = :old_id'),
            {'new_id': new_id, 'old_id': old_id}
        )
    
    # Update note new_user_id column
    for old_id, new_id in id_mapping.items():
        connection.execute(
            sa.text('UPDATE note SET new_user_id = :new_id WHERE user_id = :old_id'),
            {'new_id': new_id, 'old_id': old_id}
        )
    
    # Step 3: Drop old columns and rename new columns
    with op.batch_alter_table('note', schema=None) as batch_op:
        batch_op.drop_column('user_id')
        batch_op.alter_column('new_user_id', new_column_name='user_id', nullable=False)
    
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_column('id')
        batch_op.alter_column('new_id', new_column_name='id', nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Note: This downgrade will assign new integer IDs as we can't preserve the original ones
    
    # Add new integer columns
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('old_id', sa.INTEGER(), nullable=True))
    
    with op.batch_alter_table('note', schema=None) as batch_op:
        batch_op.add_column(sa.Column('old_user_id', sa.INTEGER(), nullable=True))
    
    # Assign new integer IDs
    connection = op.get_bind()
    
    # Get all users and assign new integer IDs
    users = connection.execute(sa.text('SELECT id FROM user')).fetchall()
    id_mapping = {}
    for i, user in enumerate(users, 1):
        old_id = user[0]
        new_id = i
        id_mapping[old_id] = new_id
    
    # Update user old_id column
    for old_id, new_id in id_mapping.items():
        connection.execute(
            sa.text('UPDATE user SET old_id = :new_id WHERE id = :old_id'),
            {'new_id': new_id, 'old_id': old_id}
        )
    
    # Update note old_user_id column
    for old_id, new_id in id_mapping.items():
        connection.execute(
            sa.text('UPDATE note SET old_user_id = :new_id WHERE user_id = :old_id'),
            {'new_id': new_id, 'old_id': old_id}
        )
    
    # Drop old columns and rename new columns
    with op.batch_alter_table('note', schema=None) as batch_op:
        batch_op.drop_column('user_id')
        batch_op.alter_column('old_user_id', new_column_name='user_id', nullable=False)
    
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_column('id')
        batch_op.alter_column('old_id', new_column_name='id', nullable=False)

    # ### end Alembic commands ###
